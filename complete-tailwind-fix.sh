#!/bin/bash

echo "üîß Complete Tailwind CSS fix - diagnosing and resolving all issues..."

echo ""
echo "1Ô∏è‚É£ Checking current setup in auth-service..."

cd apps/auth-service

# Check what's currently installed
echo "Current dependencies:"
grep -E "(tailwindcss|postcss|autoprefixer)" package.json || echo "No Tailwind dependencies found"

echo ""
echo "2Ô∏è‚É£ Installing/updating Tailwind CSS and dependencies..."

# Install latest Tailwind CSS
npm install -D tailwindcss@latest postcss@latest autoprefixer@latest

echo "‚úÖ Tailwind dependencies installed"

echo ""
echo "3Ô∏è‚É£ Creating proper PostCSS config..."

# Create PostCSS config
cat > postcss.config.js << 'EOF'
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
EOF

echo "‚úÖ PostCSS config created"

echo ""
echo "4Ô∏è‚É£ Creating comprehensive Tailwind config..."

# Create a complete Tailwind config
cat > tailwind.config.js << 'EOF'
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
    '../../packages/ui/src/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      colors: {
        background: 'var(--background)',
        foreground: 'var(--foreground)',
      },
    },
  },
  plugins: [],
}
EOF

echo "‚úÖ Tailwind config created"

echo ""
echo "5Ô∏è‚É£ Creating proper globals.css with Tailwind directives..."

# Backup existing CSS
if [ -f "src/app/globals.css" ]; then
    cp src/app/globals.css src/app/globals.css.backup
fi

# Create minimal but complete CSS file
cat > src/app/globals.css << 'EOF'
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --foreground-rgb: 0, 0, 0;
  --background-start-rgb: 214, 219, 220;
  --background-end-rgb: 255, 255, 255;
}

@media (prefers-color-scheme: dark) {
  :root {
    --foreground-rgb: 255, 255, 255;
    --background-start-rgb: 0, 0, 0;
    --background-end-rgb: 0, 0, 0;
  }
}

body {
  color: rgb(var(--foreground-rgb));
  background: linear-gradient(
      to bottom,
      transparent,
      rgb(var(--background-end-rgb))
    )
    rgb(var(--background-start-rgb));
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}
EOF

echo "‚úÖ Created proper globals.css"

echo ""
echo "6Ô∏è‚É£ Ensuring layout.tsx imports CSS correctly..."

# Check and fix layout
if [ -f "src/app/layout.tsx" ]; then
    # Backup layout
    cp src/app/layout.tsx src/app/layout.tsx.backup
    
    # Check if it imports CSS
    if ! grep -q "globals.css" src/app/layout.tsx; then
        echo "Adding CSS import to layout..."
        
        # Read current layout and add CSS import
        {
            echo "import './globals.css'"
            cat src/app/layout.tsx
        } > temp_layout.tsx
        
        mv temp_layout.tsx src/app/layout.tsx
    fi
    
    echo "‚úÖ Layout imports CSS"
else
    echo "‚ùå Layout.tsx not found!"
    exit 1
fi

echo ""
echo "7Ô∏è‚É£ Testing Tailwind CSS generation..."

# Try to generate CSS to see if it works
echo "Generating Tailwind CSS..."
npx tailwindcss -i ./src/app/globals.css -o ./test-output.css --watch=false

if [ -f "test-output.css" ]; then
    echo "‚úÖ Tailwind CSS generation successful"
    echo "Generated CSS size: $(wc -c < test-output.css) bytes"
    
    # Check if it contains actual Tailwind classes
    if grep -q "bg-blue" test-output.css; then
        echo "‚úÖ Tailwind utilities found in generated CSS"
    else
        echo "‚ö†Ô∏è No Tailwind utilities found - may need content scan"
    fi
    
    # Clean up test file
    rm test-output.css
else
    echo "‚ùå Failed to generate CSS"
fi

echo ""
echo "8Ô∏è‚É£ Creating a minimal test page that should definitely work..."

# Create an even simpler test
mkdir -p src/app/simple-test
cat > src/app/simple-test/page.tsx << 'EOF'
export default function SimpleTest() {
  return (
    <div>
      <h1 className="text-4xl font-bold text-blue-600">Simple Test</h1>
      <div className="bg-red-500 text-white p-4 m-4">
        This should have a red background and white text
      </div>
      <div className="bg-green-500 text-white p-4 m-4 rounded-lg">
        This should have a green background, white text, and rounded corners
      </div>
      <button className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
        This should be a blue button
      </button>
    </div>
  )
}
EOF

echo "‚úÖ Created simple test page"

echo ""
echo "9Ô∏è‚É£ Checking Next.js config for any CSS issues..."

# Check if there's a Next.js config that might interfere
if [ -f "next.config.js" ] || [ -f "next.config.ts" ]; then
    echo "Next.js config found:"
    if [ -f "next.config.js" ]; then
        cat next.config.js
    else
        cat next.config.ts
    fi
else
    echo "No Next.js config found, creating minimal one..."
    cat > next.config.js << 'EOF'
/** @type {import('next').NextConfig} */
const nextConfig = {}

module.exports = nextConfig
EOF
    echo "‚úÖ Created minimal Next.js config"
fi

echo ""
echo "üîü Trying a complete clean build..."

# Clean everything and rebuild
rm -rf .next
rm -rf node_modules/.cache

echo "Building project..."
if npm run build > build_log.txt 2>&1; then
    echo "‚úÖ Build successful!"
    
    # Check for CSS in build
    if [ -d ".next/static/css" ]; then
        echo "‚úÖ CSS files generated in build"
        ls -la .next/static/css/
    else
        echo "‚ùå No CSS files in build output"
    fi
else
    echo "‚ùå Build failed. Here's the error:"
    cat build_log.txt | tail -20
fi

# Clean up log
rm -f build_log.txt

cd ../..

echo ""
echo "1Ô∏è‚É£1Ô∏è‚É£ Checking if the issue is in the UI package..."

# Check if UI package has conflicting Tailwind
cd packages/ui

echo "Checking UI package Tailwind config..."
if [ -f "tailwind.config.js" ]; then
    echo "UI package has its own Tailwind config:"
    cat tailwind.config.js
    
    echo ""
    echo "This might be conflicting. Renaming it..."
    mv tailwind.config.js tailwind.config.js.backup
    echo "‚úÖ Backed up UI package Tailwind config"
fi

cd ../..

echo ""
echo "üéâ Complete Tailwind fix finished!"
echo ""
echo "üìã What was done:"
echo "‚úÖ Installed latest Tailwind CSS, PostCSS, and Autoprefixer"
echo "‚úÖ Created proper PostCSS configuration"
echo "‚úÖ Created comprehensive Tailwind config with correct content paths"
echo "‚úÖ Fixed globals.css with proper Tailwind directives"
echo "‚úÖ Ensured layout.tsx imports CSS correctly"
echo "‚úÖ Tested CSS generation manually"
echo "‚úÖ Created simple test page with basic styles"
echo "‚úÖ Checked for Next.js config conflicts"
echo "‚úÖ Performed clean build"
echo "‚úÖ Checked for UI package conflicts"
echo ""
echo "üöÄ Testing steps:"
echo "1. RESTART your dev server completely:"
echo "   - Press Ctrl+C to stop current server"
echo "   - Run: npm run dev"
echo ""
echo "2. Test the simple version first:"
echo "   - Visit: http://localhost:3000/simple-test"
echo "   - You should see red and green colored boxes"
echo ""
echo "3. If that works, test the full version:"
echo "   - Visit: http://localhost:3000/tailwind-test"
echo ""
echo "4. Then test your footer:"
echo "   - Visit: http://localhost:3000/footer-showcase"
echo ""
echo "üí° If it still doesn't work:"
echo "1. Check browser console for any errors"
echo "2. Try hard refresh (Ctrl+Shift+R or Cmd+Shift+R)"
echo "3. Clear browser cache completely"
echo "4. Check if dev server shows any CSS compilation errors"